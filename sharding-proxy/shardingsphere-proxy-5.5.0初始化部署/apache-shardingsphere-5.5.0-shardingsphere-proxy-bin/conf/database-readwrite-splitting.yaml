#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

######################################################################################################
#
# Here you can configure the rules for the proxy.
# This example is configuration of readwrite-splitting rule.
#
######################################################################################################
#
#databaseName: readwrite_splitting_db
#
#dataSources:
#  primary_ds:
#    url: jdbc:postgresql://127.0.0.1:5432/demo_primary_ds
#    username: postgres
#    password: postgres
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 50
#    minPoolSize: 1
#  replica_ds_0:
#    url: jdbc:postgresql://127.0.0.1:5432/demo_replica_ds_0
#    username: postgres
#    password: postgres
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 50
#    minPoolSize: 1
#  replica_ds_1:
#    url: jdbc:postgresql://127.0.0.1:5432/demo_replica_ds_1
#    username: postgres
#    password: postgres
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 50
#    minPoolSize: 1
#
#rules:
#- !READWRITE_SPLITTING
#  dataSources:
#    readwrite_ds:
#      writeDataSourceName: primary_ds
#      readDataSourceNames:
#        - replica_ds_0
#        - replica_ds_1
#      loadBalancerName: random
#  loadBalancers:
#    random:
#      type: RANDOM

######################################################################################################
#
# If you want to connect to MySQL, you should manually copy MySQL driver to lib directory.
#
######################################################################################################

#databaseName: readwrite_splitting_db
#
#dataSources:
#  write_ds:
#    url: jdbc:mysql://127.0.0.1:3306/demo_write_ds?useSSL=false
#    username: root
#    password:
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 50
#    minPoolSize: 1
#  read_ds_0:
#    url: jdbc:mysql://127.0.0.1:3306/demo_read_ds_0?useSSL=false
#    username: root
#    password:
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 50
#    minPoolSize: 1
#  read_ds_1:
#    url: jdbc:mysql://127.0.0.1:3306/demo_read_ds_1?useSSL=false
#    username: root
#    password:
#    connectionTimeoutMilliseconds: 30000
#    idleTimeoutMilliseconds: 60000
#    maxLifetimeMilliseconds: 1800000
#    maxPoolSize: 50
#    minPoolSize: 1
#
#rules:
#- !READWRITE_SPLITTING
#  dataSources:
#    readwrite_ds:
#      writeDataSourceName: write_ds
#      readDataSourceNames:
#        - read_ds_0
#        - read_ds_1
#      loadBalancerName: random
#  loadBalancers:
#    random:
#      type: RANDOM


databaseName: readwrite_splitting_db
rules:
  - !READWRITE_SPLITTING
    dataSources:
      readwrite_ds1:
        loadBalancerName: random
        writeDataSourceName: write_db1
        readDataSourceNames:
          - read_db1
        transactionalReadQueryStrategy: DYNAMIC
      readwrite_ds0:
        readDataSourceNames:
          - read_db0
        writeDataSourceName: write_db0
        transactionalReadQueryStrategy: DYNAMIC
        loadBalancerName: random
    loadBalancers:
      random:
        type: RANDOM
  - !SHARDING
    shardingAlgorithms:
      database-inline:
        type: INLINE
        props:
          algorithm-expression: readwrite_ds${order_id % 2}
      table-inline:
        type: INLINE
        props:
          algorithm-expression: t_order${order_id % 4}
    tables:
      t_order:
        tableStrategy:
          standard:
            shardingAlgorithmName: table-inline
            shardingColumn: order_id
        keyGenerateStrategy:
          keyGeneratorName: snowflake
          column: order_id
        actualDataNodes: readwrite_ds${0..1}.t_order${0..3}
        databaseStrategy:
          standard:
            shardingAlgorithmName: database-inline
            shardingColumn: order_id
    keyGenerators:
      snowflake:
        type: SNOWFLAKE
    auditors:
      sharding_key_required_auditor:
        type: DML_SHARDING_CONDITIONS
dataSources:
  write_db0:
    username: sharding
    url: jdbc:mysql://114.132.79.213:3306/sharding_db0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2b8
    password: sharding321!
  read_db1:
    username: sharding
    password: sharding321!
    url: jdbc:mysql://114.132.79.213:3306/sharding_db1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2b8
  read_db0:
    url: jdbc:mysql://114.132.79.213:3306/sharding_db0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2b8
    password: sharding321!
    username: sharding
  write_db1:
    password: sharding321!
    username: sharding
    url: jdbc:mysql://114.132.79.213:3306/sharding_db1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=GMT%2b8